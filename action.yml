name: Quality check.
author: Harshad Hegde <hhegde@lbl.gov>
description: Quality check for a given project.
inputs:
  python-versions:
    description: Python version(s).
  use-tox:
    description: Run tox
    default: "false"
  workflow-type:
    description: Can be one of the following [qc ; pypi ; docs]
  token:
    description: GH or PyPI token.
# outputs:
#   random-number:
#     description: Random number
#     value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: "composite"
  steps:
    
    - name: Set up Python ${{ inputs.python-versions }}
      uses: actions/setup-python@v4.3.0
      with:
        python-version: ${{ inputs.python-versions }}

    - name: Install Poetry
      run: pip install poetry
      shell: bash

    - name: Install dependencies
      run: poetry install --no-interaction
      shell: bash
      if: ${{ inputs.workflow-type == 'qc' }}

    # - name: Install doc extras
    #   run: poetry install -E docs
    #   shell: bash
    #   if: ${{ inputs.workflow-type == 'docs' }}

    - name: Add poetry dynamic versioning plugin
      run: poetry self add "poetry-dynamic-versioning[plugin]"
      shell: bash
      if: ${{ inputs.workflow-type == 'pypi' }}
    
    - name: Check code quality, static typing and run tests with tox
      run: poetry run tox
      shell: bash
      if: ${{ inputs.use-tox == 'true' && inputs.workflow-type == 'qc'}}
    
    - name: Test with pytest.
      run: poetry run pytest
      shell: bash
      if: ${{ inputs.use-tox == 'false' && inputs.workflow-type == 'qc'}}

    - name: Build source and wheel archives
      run: poetry build
      shell: bash
      if: ${{ inputs.workflow-type == 'pypi' }}

    - name: Set env
      run: echo "TOKEN_FILE=$PROJECT_DIR/token.txt" >> $GITHUB_ENV
      shell: bash
      if: ${{ inputs.workflow-type == 'docs' }}

    - name: Build documentation.
      run: |
        ls $PROJECT_DIR
#        echo ${{ inputs.token }} >> $TOKEN_FILE
#        mkdir ${{ github.workspace }}/gh-pages
#        touch ${{ github.workspace }}/gh-pages/.nojekyll
#        poetry run sphinx-apidoc -o ${{ github.workspace }}/docs/ $PROJECT_DIR/ --ext-autodoc -f
#        poetry run sphinx-build -b html ${{ github.workspace }}/docs/ _build
#        cp -r _build/* ${{ github.workspace }}/gh-pages/
      shell: bash
      if: ${{ inputs.workflow-type == 'docs' }}

      

    # - run: $GITHUB_ACTION_PATH/main.sh
    #   shell: bash

    # - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
    #   shell: bash

    # - id: random-number-generator
    #   run: echo "random-number=$(echo $RANDOM)" >> $GITHUB_OUTPUT
    #   shell: bash
